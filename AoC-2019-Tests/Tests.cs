using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using CleanCode;
using NUnit.Framework;

namespace Day2Tests
{
    [TestFixture]
    public class Tests
    {
        [TestCase("1,0,0,0,99", ExpectedResult = "2,0,0,0,99")]
        [TestCase("2,3,0,3,99", ExpectedResult = "2,3,0,6,99")]
        [TestCase("2,4,4,5,99,0", ExpectedResult = "2,4,4,5,99,9801")]
        [TestCase("1,1,1,4,99,5,6,0,99", ExpectedResult = "30,1,1,4,2,5,6,0,99")]
        [TestCase("1,9,10,3,2,3,11,0,99,30,40,50", ExpectedResult = "3500,9,10,70,2,3,11,0,99,30,40,50")]
        public string Part1 (string input)
        {
            var intCode = new IntcodeComputer(input);
            intCode.RunProgram();
            return intCode.OutputProgram;
        }

        [Test]
        public void MyPart1()
        {
            const string input = "1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,10,19,1,19,5,23,2,23,9,27,1,5,27,31,1,9,31,35,1,35,10,39,2,13,39,43,1,43,9,47,1,47,9,51,1,6,51,55,1,13,55,59,1,59,13,63,1,13,63,67,1,6,67,71,1,71,13,75,2,10,75,79,1,13,79,83,1,83,10,87,2,9,87,91,1,6,91,95,1,9,95,99,2,99,10,103,1,103,5,107,2,6,107,111,1,111,6,115,1,9,115,119,1,9,119,123,2,10,123,127,1,127,5,131,2,6,131,135,1,135,5,139,1,9,139,143,2,143,13,147,1,9,147,151,1,151,2,155,1,9,155,0,99,2,0,14,0";
            var intCode = new IntcodeComputer(input);
            intCode.InitNounVerb(12,2);
            intCode.RunProgram();
            Assert.That(intCode.Output == 3101878);
        }

        [Test]
        public void MyPart2()
        {
            const string input = "1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,10,19,1,19,5,23,2,23,9,27,1,5,27,31,1,9,31,35,1,35,10,39,2,13,39,43,1,43,9,47,1,47,9,51,1,6,51,55,1,13,55,59,1,59,13,63,1,13,63,67,1,6,67,71,1,71,13,75,2,10,75,79,1,13,79,83,1,83,10,87,2,9,87,91,1,6,91,95,1,9,95,99,2,99,10,103,1,103,5,107,2,6,107,111,1,111,6,115,1,9,115,119,1,9,119,123,2,10,123,127,1,127,5,131,2,6,131,135,1,135,5,139,1,9,139,143,2,143,13,147,1,9,147,151,1,151,2,155,1,9,155,0,99,2,0,14,0";
            var intCode = new IntcodeComputer(input);
            Assert.That(intCode.CalcNounVerb() == "8444");
        }

        [Test]
        public void Day5Part1()
        {
            const int output = 9654885;
            const string input =
                "3,225,1,225,6,6,1100,1,238,225,104,0,1102,78,40,225,1102,52,43,224,1001,224,-2236,224,4,224,102,8,223,223,101,4,224,224,1,224,223,223,1,191,61,224,1001,224,-131,224,4,224,102,8,223,223,101,4,224,224,1,223,224,223,1101,86,74,225,1102,14,76,225,1101,73,83,224,101,-156,224,224,4,224,102,8,223,223,101,6,224,224,1,224,223,223,1102,43,82,225,2,196,13,224,101,-6162,224,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1001,161,51,224,101,-70,224,224,4,224,102,8,223,223,1001,224,1,224,1,224,223,223,102,52,187,224,1001,224,-832,224,4,224,102,8,223,223,101,1,224,224,1,224,223,223,1102,19,79,225,101,65,92,224,1001,224,-147,224,4,224,1002,223,8,223,101,4,224,224,1,223,224,223,1102,16,90,225,1102,45,44,225,1102,92,79,225,1002,65,34,224,101,-476,224,224,4,224,102,8,223,223,1001,224,5,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,107,226,226,224,1002,223,2,223,1005,224,329,1001,223,1,223,1007,226,226,224,102,2,223,223,1005,224,344,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,359,1001,223,1,223,8,226,677,224,102,2,223,223,1006,224,374,101,1,223,223,1107,226,677,224,1002,223,2,223,1006,224,389,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,404,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,419,1001,223,1,223,7,677,226,224,102,2,223,223,1005,224,434,101,1,223,223,1007,677,677,224,102,2,223,223,1005,224,449,1001,223,1,223,108,226,677,224,102,2,223,223,1005,224,464,1001,223,1,223,108,226,226,224,102,2,223,223,1006,224,479,101,1,223,223,107,226,677,224,102,2,223,223,1006,224,494,1001,223,1,223,7,226,226,224,1002,223,2,223,1006,224,509,101,1,223,223,1108,677,226,224,102,2,223,223,1005,224,524,101,1,223,223,1107,677,226,224,102,2,223,223,1005,224,539,101,1,223,223,1008,677,226,224,102,2,223,223,1005,224,554,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,569,101,1,223,223,1107,677,677,224,102,2,223,223,1006,224,584,1001,223,1,223,1108,226,226,224,1002,223,2,223,1006,224,599,101,1,223,223,7,226,677,224,102,2,223,223,1006,224,614,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,629,101,1,223,223,1007,677,226,224,102,2,223,223,1006,224,644,101,1,223,223,8,677,677,224,1002,223,2,223,1006,224,659,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,674,101,1,223,223,4,223,99,226";
            var intCode = new IntcodeComputer(input, new IntcodeIoHandler(new []{1}));
            intCode.RunProgram();
            Assert.That(intCode.IntcodeIoHandler.LastOutput.Equals(output));
        }

        [Test]
        public void Day5Part2Test1()
        {
            const string inputString = "3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9";
            var intCode = new IntcodeComputer(inputString, new IntcodeIoHandler(new []{0}));
            intCode.RunProgram();
            Assert.That(intCode.IntcodeIoHandler.LastOutput.Equals(0));
        }
        
        [Test]
        public void Day5Part2Test2()
        {
            const string inputString = "3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9";
            var intCode = new IntcodeComputer(inputString, new IntcodeIoHandler(new []{1}));
            intCode.RunProgram();
            Assert.That(intCode.IntcodeIoHandler.LastOutput.Equals(1));
        }

        [Test]
        public void Day5Part2Test3()
        {
            const string inputString = "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99";
            var inputArray = new[] {7, 8, 9};
            var intCode = new IntcodeComputer(inputString, new IntcodeIoHandler(inputArray));
            intCode.RunProgram();
            Assert.That(intCode.IntcodeIoHandler.LastOutput == 999);
            intCode.ResetComputer();
            intCode.RunProgram();
            Assert.That(intCode.IntcodeIoHandler.LastOutput == 1000);
            intCode.ResetComputer();
            intCode.RunProgram();
            Assert.That(intCode.IntcodeIoHandler.LastOutput == 1001);
        }

        [TestCase("4,3,2,1,0", "3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0", ExpectedResult = 43210)]
        [TestCase("0,1,2,3,4", "3,23,3,24,1002,24,10,24,1002,23,-1,23,101,5,23,23,1,24,23,23,4,23,99,0,0", ExpectedResult = 54321)]
        public int IndividualThrusterSettings(string phaseString, string intCode)
        {
            var phase = phaseString.Split(',').Select(int.Parse).ToList();
            var mar = new MultiAmpRunner(phase, intCode, MultiAmpMode.Single);
            return mar.GetThrusterSignal();
        }
        
        [TestCase("9,8,7,6,5", "3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5", ExpectedResult = 139629729)]
        [TestCase("9,7,8,5,6", "3,52,1001,52,-5,52,3,53,1,52,56,54,1007,54,5,55,1005,55,26,1001,54,-5,54,1105,1,12,1,53,54,53,1008,54,0,55,1001,55,1,55,2,53,55,53,4,53,1001,56,-1,56,1005,56,6,99,0,0,0,0,10", ExpectedResult = 18216)]
        public int IndividualFeedbackThrusterSettings(string phaseString, string intCode)
        {
            var phase = phaseString.Split(',').Select(int.Parse).ToList();
            var mar = new MultiAmpRunner(phase, intCode, MultiAmpMode.Feedback);
            return mar.GetThrusterSignal();
        }
    
        [TestCase("3,8,1001,8,10,8,105,1,0,0,21,38,55,64,89,114,195,276,357,438,99999,3,9,101,3,9,9,102,3,9,9,1001,9,5,9,4,9,99,3,9,101,2,9,9,1002,9,3,9,101,5,9,9,4,9,99,3,9,101,3,9,9,4,9,99,3,9,1002,9,4,9,101,5,9,9,1002,9,5,9,101,5,9,9,102,3,9,9,4,9,99,3,9,101,3,9,9,1002,9,4,9,101,5,9,9,102,5,9,9,1001,9,5,9,4,9,99,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,99", ExpectedResult = 61019896)]
        public int AllAmplifierFeedbackLoopCalculatesMaximumSignal(string intCode)
        {
            var maximalThrusterSignal = new MaximalThrusterSignal(intCode, MultiAmpMode.Feedback);
            return maximalThrusterSignal.CalculateMaximalSignal();
        }

        [TestCase("109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99")]
        public void ComputerCorrectlyImplementsMemoryExpansion(string inputProgram)
        {
            var computer = new IntcodeComputer(inputProgram);
            computer.RunProgram();
            Assert.That(computer.IntcodeIoHandler.OutputAsString == inputProgram);
        }
    }
}